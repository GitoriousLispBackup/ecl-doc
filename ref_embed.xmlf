<?xml version="1.0"?><!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book lang="en"><reference id="embed.dict"><title>Embedding Reference</title>

<!-- ====================================================================== -->
<!-- cl_boot()                                                              -->
<!-- ====================================================================== -->

<refentry id="ref.embed.cl_boot">
 <refnamediv>
  <refname><function>cl_boot</function></refname>
  <refpurpose>Setup the lisp environment.</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <title>Function</title>
  <funcsynopsis>
   <?dbhtml funcsynopsis-style='ansi'?>
   <funcprototype>
    <funcdef>int <function>cl_boot</function></funcdef>
    <paramdef>int <parameter>argc</parameter></paramdef>
    <paramdef>char **<parameter>argv</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <variablelist>
   <varlistentry>
    <term><replaceable>argc</replaceable></term>
    <listitem><para>An integer with the number of arguments to this program.</para></listitem>
    <term><replaceable>argv</replaceable></term>
    <listitem><para>A vector of strings with the arguments to this program.</para></listitem>
   </varlistentry>
  </variablelist>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>This function must be called before any other function from the &ECL;
  library, including the creation of any lisp object or evaluating any lisp code.
  The only exception are <xref linkend="ref.embed.ecl_set_option"/>
  and <xref linkend="ref.embed.ecl_get_option"/>.
  </para>
 </refsect1>
</refentry>

<!-- ====================================================================== -->
<!-- cl_shutdown()                                                          -->
<!-- ====================================================================== -->

<refentry id="ref.embed.cl_shutdown">
 <refnamediv>
  <refname><function>cl_shutdown</function></refname>
  <refpurpose>Close the lisp environment.</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <title>Function</title>
  <funcsynopsis>
   <?dbhtml funcsynopsis-style='ansi'?>
   <funcprototype>
    <funcdef>int <function>cl_shutdown</function></funcdef>
    <paramdef>void</paramdef>
   </funcprototype>
  </funcsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>This function must be called before exiting a program that uses the &ECL;
  environment. It performs some cleaning, including the execution of any
  finalizers, unloading shared libraries and deleting temporary files that were
  created by the compiler.
  </para>
 </refsect1>
</refentry>

<!-- ====================================================================== -->
<!-- ecl_set_option()                                                       -->
<!-- ====================================================================== -->

<refentry id="ref.embed.ecl_set_option">
 <refnamediv>
  <refname><function>ecl_set_option</function></refname>
  <refpurpose>Set a boot option.</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <title>Function</title>
  <funcsynopsis>
   <?dbhtml funcsynopsis-style='ansi'?>
   <funcprototype>
    <funcdef>void <function>ecl_set_option</function></funcdef>
    <paramdef>int <parameter>option</parameter></paramdef>
    <paramdef>cl_fixnum <parameter>value</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <variablelist>
   <varlistentry>
    <term><replaceable>option</replaceable></term>
    <listitem><para>An integer from <xref linkend="table.boot_options"/>.</para></listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable>function</replaceable></term>
    <listitem><para>A <type>cl_index</type> value for this option.</para></listitem>
   </varlistentry>
  </variablelist>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <para>This functions sets the value of different options that have
  to be customized <emphasis>before</emphasis> &ECL; boots. The table
  of options and default values [<xref linkend="table.boot_options"/>]
  shows that some of them are boolean, and some of them are unsigned
  integers.</para>

  <para>We distinguish three sets of values. The first set determines
  whether &ECL; handles certain exceptions, such as access to forbidden
  regions of memory, interrupts via <keycombo>Ctrl-C</keycombo>, floating point
  exceptions, etc.</para>

  <para>The second set is related to the sizes of different
  stacks. Currently &ECL; uses four stacks: a bind stack for keeping
  assignments to special variables; a frame stack for implementing
  blocks, tagbodys and catch points; an interpreter stack for
  evaluating bytecodes, and finally the machine or C stack, of the
  computer we run in. We can set the expected size of these stacks,
  together with the size of a safety area which, if penetrated, will
  lead to the generation of a correctable error.</para>

  <table id="table.boot_options">
    <title>Boot options for embedded &ECL;</title>
    <tgroup cols="4">
      <thead>
      <row>
       <entry>Name (<constant>ECL_OPT_*</constant>)</entry>
       <entry>Type</entry>
       <entry>Default</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><constant>INCREMENTAL_GC</constant></entry>
       <entry><type>boolean</type></entry>
       <entry><constant>TRUE</constant></entry>
       <entry>Activate generational garbage collector.</entry>
      </row>
      <row>
       <entry><constant>TRAP_SIGSEGV</constant></entry>
       <entry><type>boolean</type></entry>
       <entry><constant>TRUE</constant></entry>
       <entry>Capture SIGSEGV signals.</entry>
      </row>
      <row>
       <entry><constant>TRAP_SIGFPE</constant></entry>
       <entry><type>boolean</type></entry>
       <entry><constant>TRUE</constant></entry>
       <entry>Capture floating point exceptions.</entry>
      </row>
      <row>
       <entry><constant>TRAP_SIGINT</constant></entry>
       <entry><type>boolean</type></entry>
       <entry><constant>TRUE</constant></entry>
       <entry>Capture user interrupts.</entry>
      </row>
      <row>
       <entry><constant>TRAP_SIGILL</constant></entry>
       <entry><type>boolean</type></entry>
       <entry><constant>TRUE</constant></entry>
       <entry>Capture SIGILL exception.</entry>
      </row>
      <row>
       <entry><constant>TRAP_SIGBUS</constant></entry>
       <entry><type>boolean</type></entry>
       <entry><constant>TRUE</constant></entry>
       <entry>Capture SIGBUS exception.</entry>
      </row>
      <row>
       <entry><constant>BOOTED</constant></entry>
       <entry><type>boolean</type></entry>
       <entry><constant>TRUE/FALSE</constant></entry>
       <entry>Has &ECL; booted (read only).</entry>
      </row>
      <row>
       <entry><constant>BIND_STACK_SIZE</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>8192</constant></entry>
       <entry>Size of stack for binding special variables.</entry>
      </row>
      <row>
       <entry><constant>BIND_STACK_SAFETY_AREA</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>128</constant></entry>
       <entry></entry>
      </row>
      <row>
       <entry><constant>FRAME_STACK_SIZE</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>2048</constant></entry>
       <entry>Size of stack for nonlocal jumps.</entry>
      </row>
      <row>
       <entry><constant>FRAME_STACK_SAFETY_AREA</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>128</constant></entry>
       <entry></entry>
      </row>
      <row>
       <entry><constant>LISP_STACK_SIZE</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>32768</constant></entry>
       <entry>Size of interpreter stack.</entry>
      </row>
      <row>
       <entry><constant>LISP_STACK_SAFETY_AREA</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>128</constant></entry>
       <entry></entry>
      </row>
      <row>
       <entry><constant>C_STACK_SIZE</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>131072</constant></entry>
       <entry>Size of C stack (not exact).</entry>
      </row>
      <row>
       <entry><constant>C_STACK_SAFETY_AREA</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>4192</constant></entry>
       <entry></entry>
      </row>
      <row>
       <entry><constant>SIGALTSTACK_SIZE</constant></entry>
       <entry><type>cl_index</type></entry>
       <entry><constant>1</constant></entry>
       <entry>If nonzero, run C signal handler in an alternative
       signal. A small value is automatically incremented.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

 </refsect1>

</refentry>

<!-- ====================================================================== -->
<!-- ecl_get_option()                                                       -->
<!-- ====================================================================== -->

<refentry id="ref.embed.ecl_get_option">
 <refnamediv>
  <refname><function>ecl_get_option</function></refname>
  <refpurpose>Read the value of a boot option.</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <title>Function</title>
  <funcsynopsis>
   <?dbhtml funcsynopsis-style='ansi'?>
   <funcprototype>
    <funcdef>cl_fixnum <function>ecl_get_option</function></funcdef>
    <paramdef>int <parameter>option</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <variablelist>
   <varlistentry>
    <term><replaceable>option</replaceable></term>
    <listitem><para>An integer from <xref linkend="table.boot_options"/>.</para></listitem>
   </varlistentry>
  </variablelist>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <para>This functions reads the value of different options that have
  to be customized <emphasis>before</emphasis> &ECL; boots. The table
  of options and default values is <xref linkend="table.boot_options"/>.
  </para>
 </refsect1>
</refentry>
</reference></book>
<!-- Keep this comment at the end of the file
      Local variables:
      mode: nxml
      sgml-parent-document: "ecl.xml"
      sgml-indent-step: 1
      nxml-child-indent: 1
      nxml-outline-child-indent: 1
      fill-column: 79
      End:
 -->